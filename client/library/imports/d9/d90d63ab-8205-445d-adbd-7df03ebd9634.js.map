{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAI,aAAa,GAAG;AAChB,YAAQ,EAAE,EAAE;;AAEZ,QAAI,EAAE,cAAU,SAAS,EAAa;YAAX,IAAI,yDAAG,EAAE;;AAChC,YAAI,OAAO,IAAI,IAAI,QAAQ,EAAE;AACzB,gBAAI,GAAG,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC;SACzB;;AAED,YAAI,OAAO,GAAG,EAAE,CAAA;AAChB,YAAI,CAAC,SAAS,GAAG,SAAS,CAAA;;AAE1B,aAAM,IAAI,YAAY,IAAI,IAAI,CAAC,QAAQ,EAAC;AACpC,gBAAI,YAAY,IAAI,SAAS,EAAE;AAC3B,qBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACzD,wBAAI,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;AACtD,2BAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;iBAC5B;aACJ;SACJ;;AAED,eAAO,OAAO,CAAA;KACjB;;AAED,MAAE,EAAE,YAAU,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE;;AAEvC,YAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,EAAE,CAAA;;AAEzD,YAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA;AACpD,gBAAQ,CAAC,OAAO,GAAG,MAAM,CAAC;KAC7B;;;AAGD,OAAG,EAAE,aAAU,SAAS,EAAE;AACtB,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtD,gBAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;SACrC;KACJ;;;AAGD,aAAS,EAAE,mBAAU,MAAM,EAAE;AAC3B,aAAK,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;AAC9B,gBAAI,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACxC,gBAAI,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC,UAAU,QAAQ,EAAE;AACpD,uBAAO,QAAQ,CAAC,OAAO,GAAG,MAAM,CAAC;aAClC,CAAC,CAAC,GAAG,CAAC,UAAU,QAAQ,EAAE,KAAK,EAAE;AAChC,uBAAO,KAAK,CAAC;aACd,CAAC,CAAC;;AAEH,gBAAI,WAAW,GAAG,CAAC,CAAC;AACpB,kBAAM,CAAC,OAAO,CAAC,UAAU,KAAK,EAAE;AAC9B,6BAAa,CAAC,MAAM,CAAC,KAAK,GAAG,WAAW,EAAE,CAAC,CAAC,CAAC;AAC7C,2BAAW,GAAG,WAAW,GAAG,CAAC,CAAC;aAC/B,CAAC,CAAC;SACJ;KACF;CACJ,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,aAAa,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "let KQGlobalEvent = {\r\n    _handles: {},\r\n    //发送事件\r\n    emit: function (eventName, data = {}) {\r\n        if (typeof data == 'string') {\r\n            data = {'data': data};\r\n        }\r\n\r\n        var returns = [] //返回值\r\n        data.eventName = eventName//保存一下事件名字\r\n\r\n        for ( var findEvenName in this._handles){\r\n            if (findEvenName == eventName) {\r\n                for (var i = 0; i < this._handles[findEvenName].length; i++) {\r\n                    var returnValue = this._handles[findEvenName][i](data)\r\n                    returns.push(returnValue)\r\n                }\r\n            }\r\n        }\r\n\r\n        return returns\r\n    },\r\n    //添加普通事件\r\n    on: function (eventName, callback, target) {\r\n        // console.log('收到事件', eventName);\r\n        this._handles[eventName] = this._handles[eventName] || []\r\n\r\n        this._handles[eventName].push(callback.bind(target))\r\n        callback._caller = target;\r\n    },\r\n\r\n    //通过事件名移除一个监听器\r\n    off: function (eventName) {\r\n        for (var i = 0; i < this._handles[eventName].length; i++) {\r\n            this._handles[eventName][i] = null\r\n        }\r\n    },\r\n\r\n    // 移动一个 target 上所有的监听\r\n    offTarget: function (target) {\r\n      for (var name in this._handles) {\r\n        var eventHandlers = this._handles[name];\r\n        var indexs = eventHandlers.filter(function (callback) {\r\n          return callback._caller = target;\r\n        }).map(function (callback, index) {\r\n          return index;\r\n        });\r\n\r\n        var indexOffset = 0;\r\n        indexs.forEach(function (index) {\r\n          eventHandlers.splice(index + indexOffset, 1);\r\n          indexOffset = indexOffset + 1;\r\n        });\r\n      }\r\n    },\r\n};\r\n\r\nmodule.exports = KQGlobalEvent;\r\n"
  ]
}
{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;;AAGjC,IAAM,QAAQ,GAAG,EAAE,CAAC,KAAK,CAAC;AACtB,aAAS,EAAE,CAAC,SAAS;;AAErB,YAAU,EAAE;AACV,kBAAc,EAAE,IAAI;AACpB,kBAAc,EAAE,KAAK;GACtB;;AAED,SAAO,EAAE;AACP,YAAQ,EAAE,IAAI;GACf;;AAED,QAAM,EAAE,kBAAY;AAClB,YAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;AACzB,MAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GACvC;;;AAGD,kBAAgB,EAAE,0BAAU,KAAK,EAAE;AACjC,QAAI,CAAC,cAAc,GAAG,KAAK,CAAC;GAC7B;;;AAGD,qBAAmB,EAAE,+BAAY;AAC/B,QAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;AAC5B,QAAI,CAAC,YAAY,EAAE,CAAC;GACrB;;;AAGD,wBAAsB,EAAE,kCAAY;AAClC,WAAO,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC;GACpC;;;AAGD,eAAa,EAAE,yBAAY;;;;AAIzB,QAAI,CAAC,cAAc,GAAG,IAAI,CAAC;;AAE3B,QAAI,CAAC,IAAI,CAAC,cAAc,EAAE;AACxB,QAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;AACxB,UAAI,CAAC,YAAY,EAAE,CAAC;AACpB,aAAO;KACR;;AAED,QAAI,CAAC,gBAAgB,EAAE,CAAC;GACzB;;;AAGD,cAAY,EAAE,wBAAY;AACxB,QAAI,CAAC,cAAc,GAAG,KAAK,CAAC;AAC5B,QAAI,CAAC,sBAAsB,EAAE,CAAC;GAC/B;;;AAGD,eAAa,EAAE,yBAAY;AACzB,WAAO,IAAI,CAAC,cAAc,CAAC;GAC5B;;;AAGD,kBAAgB,EAAE,4BAAY;AAC5B,QAAI,SAAS,GAAG,GAAG,CAAC;AACpB,QAAI,QAAQ,GAAG,GAAG,CAAC;AACnB,MAAE,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;;;;;AAK5B,QAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA,UAAS,MAAM,EAAE,KAAK,EAAE;AACvE,UAAI,KAAK,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;AAC3C,eAAO,IAAI,CAAC;OACb;;AAED,aAAQ,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAE;KACrD,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;AAEd,QAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAA,UAAU,IAAI,EAAE,KAAK,EAAE;AACjD,UAAI,KAAK,GAAG,SAAS,GAAG,KAAK,GAAG,QAAQ,CAAC;AACzC,UAAI,KAAK,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;;AAE3C,aAAK,GAAG,SAAS,GAAG,CAAC,KAAK,GAAG,CAAC,CAAA,GAAI,QAAQ,GAAG,CAAC,CAAC;OAChD;;AAED,UAAI,CAAC,YAAY,CAAC,YAAY;AAC5B,UAAE,CAAC,GAAG,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;AAC1C,cAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;OACzC,EAAE,KAAK,CAAC,CAAC;KAEX,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;GAEf;;CAEJ,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "const Socket = require('socket');\r\n\r\n// 用于回放的组件\r\nconst Playback = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n      _playbackDatas: null,   // 用于回放的数据\r\n      _isPlaybacking: false,\r\n    },\r\n\r\n    statics: {\r\n      instance: null,\r\n    },\r\n\r\n    onLoad: function () {\r\n      Playback.instance = this;\r\n      cc.game.addPersistRootNode(this.node);\r\n    },\r\n\r\n    // 设置回放数据\r\n    setPlaybackDatas: function (datas) {\r\n      this._playbackDatas = datas;\r\n    },\r\n\r\n    // 清空回放数据。同时会清空回放\r\n    removePlaybackDatas: function () {\r\n      this.setPlaybackDatas(null);\r\n      this.stopPlayback();\r\n    },\r\n\r\n    // 是否包含回放数据\r\n    isContainPlaybackDatas: function () {\r\n      return this._playbackDatas != null;\r\n    },\r\n\r\n    // 开始回放\r\n    startPlayback: function () {\r\n      // 模拟 socket 接收到了事件即可\r\n      //cc.log(\"Playback 开始回放\");\r\n\r\n      this._isPlaybacking = true;\r\n\r\n      if (!this._playbackDatas) {\r\n        cc.error(\"想回放，却没有回放数据\");\r\n        this.stopPlayback();\r\n        return;\r\n      }\r\n\r\n      this._executePlayback();\r\n    },\r\n\r\n    // 停止回放\r\n    stopPlayback: function () {\r\n      this._isPlaybacking = false;\r\n      this.unscheduleAllCallbacks();\r\n    },\r\n\r\n    // 是否正在回放\r\n    isPlaybacking: function () {\r\n      return this._isPlaybacking;\r\n    },\r\n\r\n    // 执行真正的回放操作\r\n    _executePlayback: function () {\r\n      let startTime = 1.0;\r\n      let interval = 3.0;\r\n      cc.log(this._playbackDatas);\r\n\r\n      // 在某些特殊情况下\r\n      // 回放数据里会包含两套 gameOver action\r\n      // 所以需要过滤掉其中一个\r\n      this._playbackDatas = this._playbackDatas.filter(function(string, index) {\r\n        if (index == this._playbackDatas.length - 1) {\r\n          return true;\r\n        }\r\n\r\n        return (string.indexOf('\"action\":\"gameOver') == -1);\r\n      }.bind(this));\r\n\r\n      this._playbackDatas.forEach(function (data, index) {\r\n        var delay = startTime + index * interval;\r\n        if (index == this._playbackDatas.length - 1) {\r\n          // 如果是最后一个，则应该只间隔一秒\r\n          delay = startTime + (index - 1) * interval + 1;\r\n        }\r\n\r\n        this.scheduleOnce(function () {\r\n          cc.log(\"回放开始模拟 Socket 接收到服务器消息, \", index);\r\n          Socket.instance._dispatchResponse(data);\r\n        }, delay);\r\n\r\n      }.bind(this));\r\n\r\n    },\r\n\r\n});\r\n\r\nmodule.exports = Playback;\r\n"
  ]
}
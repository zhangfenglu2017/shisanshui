{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "var Socket = require('socket');\r\nvar KQGlobalEvent = require('KQGlobalEvent');\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        item: { // item template to instantiate other items\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        scrollView: {\r\n        \tdefault: null,\r\n        \ttype: cc.ScrollView\r\n        },\r\n        spawnCount: 0, // how many items we actually spawn\r\n        totalCount: 0, // how many items we need for the whole list\r\n        spacing: 0, // space between each item\r\n        bufferZone: 0, // when item is away from bufferZone, we relocate it\r\n        //btnAddItem: cc.Button,\r\n        //btnRemoveItem: cc.Button,\r\n        //btnJumpToPosition: cc.Button,\r\n        //lblJumpPosition: cc.Label,\r\n        //lblTotalItems: cc.Label,\r\n        daikaiList:null,\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n    \tthis.content = this.scrollView.content;\r\n        this.items = []; // array to store spawned items\r\n        this._registerSocketEvent();\r\n        Socket.sendGetDaiKaiFang(Socket.instance.userInfo.id);\r\n        this.updateTimer = 0;\r\n        this.updateInterval = 0.2;\r\n        this.lastContentPosY = 0; // use this variable to detect if we are scrolling up or down\r\n    },\r\n\r\n    _registerSocketEvent: function _registerSocketEvent() {\r\n        KQGlobalEvent.on(Socket.Event.ReceiveGetDaiKaiDesk, this._getDaikaiRoomSocketCallback, this);\r\n    },\r\n\r\n    _getDaikaiRoomSocketCallback:function(response){\r\n        console.log(\"JSON.stringify(response.data.daikaiList)=====\" + JSON.stringify(response.data.daikaiList));\r\n        if (response.result) {\r\n            var jslength=0;\r\n\r\n            var daikaiList = response.data.daikaiList;\r\n            this.daikaiList = daikaiList;\r\n            for(var js2 in daikaiList){\r\n                this.daikaiList.id = jslength;\r\n                jslength++;\r\n            }\r\n            this.totalCount = jslength;\r\n            this.items = [];\r\n            this.content.removeAllChildren(true);\r\n            this.initialize();\r\n        }\r\n    },\r\n\r\n    initialize: function () {\r\n        this.content.height = this.totalCount * (this.item.height + this.spacing) + this.spacing; // get total content height\r\n    \t//for (let i = 0; i < this.spawnCount; ++i) { // spawn items, we only need to do this once\r\n        for (let i = 0; i < this.totalCount; ++i) { // spawn items, we only need to do this once\r\n    \t\tlet item = cc.instantiate(this.item);\r\n    \t\tthis.content.addChild(item);\r\n            if(this.daikaiList && this.daikaiList.length > 0)\r\n            {\r\n                item.setPosition(0, -item.height * (0.5 + i) - this.spacing * (i + 1));\r\n                item.getComponent('Item').updateItem(this.daikaiList[i]);\r\n                this.items.push(item);\r\n            }\r\n\r\n\r\n    \t}\r\n    },\r\n\r\n    getPositionInView: function (item) { // get item position in scrollview's node space\r\n       // let worldPos = item.parent.convertToWorldSpaceAR(item.position);\r\n        let worldPos = item.convertToWorldSpaceAR(item.position);\r\n        let viewPos = this.scrollView.node.convertToNodeSpaceAR(worldPos);\r\n        //return item.getPosition();\r\n\r\n        return viewPos;\r\n    },\r\n\r\n    update: function(dt) {\r\n        this.updateTimer += dt;\r\n        if (this.updateTimer < this.updateInterval) return; // we don't need to do the math every frame\r\n        this.updateTimer = 0;\r\n        let items = this.items;\r\n        let buffer = this.bufferZone;\r\n        let isDown = this.scrollView.content.y < this.lastContentPosY; // scrolling direction\r\n        let offset = (this.item.height + this.spacing) * items.length;\r\n        for (let i = 0; i < items.length; ++i) {\r\n            let viewPos = this.getPositionInView(items[i]);\r\n            if (isDown) {\r\n                // if away from buffer zone and not reaching top of content\r\n                if (viewPos.y < -buffer && items[i].y + offset < 0) {\r\n                    items[i].setPositionY(items[i].y + offset );\r\n                    let item = items[i].getComponent('Item');\r\n                    let itemId = item.itemID - items.length; // update item id\r\n                    if(this.daikaiList && this.daikaiList.length > 0)\r\n                    {\r\n                        item.updateItem(this.daikaiList[i]);\r\n                    }\r\n                }\r\n            } else {\r\n                // if away from buffer zone and not reaching bottom of content\r\n                if (viewPos.y > buffer && items[i].y - offset > -this.content.height) {\r\n                    items[i].setPositionY(items[i].y - offset );\r\n                    let item = items[i].getComponent('Item');\r\n                    let itemId = item.itemID + items.length;\r\n                    if(this.daikaiList && this.daikaiList.length > 0)\r\n                    {\r\n                        item.updateItem(this.daikaiList[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // update lastContentPosY\r\n        this.lastContentPosY = this.scrollView.content.y;\r\n        //this.lblTotalItems.textKey = \"Total Items: \" + this.totalCount;\r\n        // this.lblScrollEvent.string = \"Total Items: \" + items.length;\r\n    },\r\n\r\n\r\n    scrollEvent: function(sender, event) {\r\n        //switch(event) {\r\n        //    case 0:\r\n        //       this.lblScrollEvent.string = \"Scroll to Top\";\r\n        //       break;\r\n        //    case 1:\r\n        //       this.lblScrollEvent.string = \"Scroll to Bottom\";\r\n        //       break;\r\n        //    case 2:\r\n        //       this.lblScrollEvent.string = \"Scroll to Left\";\r\n        //       break;\r\n        //    case 3:\r\n        //       this.lblScrollEvent.string = \"Scroll to Right\";\r\n        //       break;\r\n        //    case 4:\r\n        //       this.lblScrollEvent.string = \"Scrolling\";\r\n        //       break;\r\n        //    case 5:\r\n        //       this.lblScrollEvent.string = \"Bounce Top\";\r\n        //       break;\r\n        //    case 6:\r\n        //       this.lblScrollEvent.string = \"Bounce bottom\";\r\n        //       break;\r\n        //    case 7:\r\n        //       this.lblScrollEvent.string = \"Bounce left\";\r\n        //       break;\r\n        //    case 8:\r\n        //       this.lblScrollEvent.string = \"Bounce right\";\r\n        //       break;\r\n        //    case 9:\r\n        //       this.lblScrollEvent.string = \"Auto scroll ended\";\r\n        //       break;\r\n        //}\r\n    },\r\n\r\n    addItem: function() {\r\n        this.content.height = (this.totalCount + 1) * (this.item.height + this.spacing) + this.spacing; // get total content height\r\n        this.totalCount = this.totalCount + 1;\r\n    },\r\n\r\n    removeItem: function() {\r\n        if (this.totalCount - 1 < 30) {\r\n            cc.error(\"can't remove item less than 30!\");\r\n            return;\r\n        }\r\n\r\n        this.content.height = (this.totalCount - 1) * (this.item.height + this.spacing) + this.spacing; // get total content height\r\n        this.totalCount = this.totalCount - 1;\r\n    },\r\n\r\n    scrollToFixedPosition: function () {\r\n        this.scrollView.scrollToOffset(cc.p(0, 500), 2);\r\n    }\r\n});\r\n"
  ]
}
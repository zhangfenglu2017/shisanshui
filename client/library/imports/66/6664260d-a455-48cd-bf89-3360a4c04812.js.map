{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,IAAM,uBAAuB,GAAG,OAAO,CAAC,yBAAyB,CAAC,CAAC;;;;;;;;;;;AAWnE,MAAM,CAAC,eAAe,GAAG,UAAS,WAAW,EAAE,SAAS,EAAE;AACtD,QAAI,WAAW,CAAC,MAAM,IAAI,SAAS,EAAE;AACjC,eAAO,WAAW,CAAC;KACtB;AACD,eAAW,CAAC,OAAO,CAAC,UAAS,IAAI,EAAC;AAC9B,YAAG,IAAI,CAAC,MAAM,IAAI,CAAC,EAAC;AAChB,gBAAI,CAAC,MAAM,GAAG,EAAE,CAAC;SACpB;KACJ,CAAC,CAAC;AACH,QAAI,KAAK,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,UAAS,CAAC,EAAC,CAAC,EAAC;AAC9C,eAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;KAC9B,CAAC,CAAC;;AAEH,QAAI,SAAS,GAAG,CACZ,MAAM,CAAC,UAAU,EACjB,MAAM,CAAC,eAAe,EACtB,MAAM,CAAC,UAAU,EACjB,MAAM,CAAC,QAAQ,EACf,MAAM,CAAC,WAAW,EAClB,MAAM,CAAC,UAAU,EACjB,MAAM,CAAC,WAAW,EAClB,MAAM,CAAC,UAAU,EACjB,MAAM,CAAC,SAAS,CACnB,CAAC;;AAEF,QAAI,WAAW,GAAG,IAAI,CAAC;AACvB,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACvC,YAAI,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AACxB,mBAAW,GAAG,AAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAE,KAAK,CAAC,CAAC;AACzC,YAAI,WAAW,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;AACvC,kBAAM;SACT;KACJ;;AAED,QAAI,MAAM,GAAG,EAAE,CAAC;AAChB,QAAI,WAAW,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;;AAEvC,YAAI,QAAQ,GAAG,CAAC,CAAC;AACjB,mBAAW,CAAC,OAAO,CAAC,UAAA,UAAU,EAAI;AAC9B,gBAAM,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC,UAAA,KAAK;uBAAI,KAAK,CAAC,KAAK,CAAC;aAAA,CAAC,CAAC;AAC5D,gBAAM,KAAK,GAAG,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AAC7C,gBAAI,KAAK,GAAG,QAAQ,EAAE;AAClB,wBAAQ,GAAG,KAAK,CAAC;AACjB,sBAAM,GAAG,UAAU,CAAC;aACvB;SACJ,CAAC,CAAC;KACF;;AAED,QAAI,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,UAAS,KAAK,EAAE;AACzC,eAAO,KAAK,CAAC,KAAK,CAAC,CAAC;KACvB,CAAC,CAAC;;;;;;;cAOO,IAAI,WAAW,CAAC,MAAM,GAAG,SAAS,EAAE;AAC1C,mBAAW,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;KACjD;;AAED,WAAO,WAAW,IAAI,EAAE,CAAC;CAC5B,CAAC;;AAEF,MAAM,CAAC,cAAc,GAAG,UAAS,KAAK,EAAE,EAEvC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "const KQCard = require('KQCard');\r\nconst KQCardFindTypeExtension = require('KQCardFindTypeExtension');\r\n\r\n// 牌自动选择的扩展\r\n\r\n/**\r\n * 自动选择牌，由大到小\r\n *\r\n * @param  {[KQCard]} originCards  被选择的原始牌数组\r\n *\r\n * @return {[KQCard]}\r\n */\r\nKQCard.autoSelectCards = function(originCards, maxLength) {\r\n    if (originCards.length <= maxLength) {\r\n        return originCards;\r\n    }\r\n    originCards.forEach(function(card){\r\n        if(card.scores == 1){\r\n            card.scores = 14;\r\n        }\r\n    });\r\n    let cards = originCards.slice().sort(function(a,b){\r\n        return a.scores - b.scores;\r\n    });\r\n\r\n    let findFuncs = [\r\n        KQCard.findWuTong,\r\n        KQCard.findTongHuaShun,\r\n        KQCard.findTieZhi,\r\n        KQCard.findHuLu,\r\n        KQCard.findTongHua,\r\n        KQCard.findShunZi,\r\n        KQCard.findSanTiao,\r\n        KQCard.findLiaDui,\r\n        KQCard.findDuiZi\r\n    ];\r\n\r\n    let indexArrays = null;\r\n    for (let i = 0; i < findFuncs.length; ++i) {\r\n        let func = findFuncs[i];\r\n        indexArrays = (func.bind(KQCard))(cards);\r\n        if (indexArrays && indexArrays.length > 0) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    var indexs = [];\r\n    if (indexArrays && indexArrays.length > 0) {\r\n        // 找出同类型的牌里的分数最大的牌\r\n        var maxScore = 0;\r\n        indexArrays.forEach(tempIndexs => {\r\n            const tempCards = tempIndexs.map(index => cards[index]);\r\n        const score = KQCard.scoreOfCards(tempCards);\r\n        if (score > maxScore) {\r\n            maxScore = score;\r\n            indexs = tempIndexs;\r\n        }\r\n    });\r\n    }\r\n\r\n    let targetCards = indexs.map(function(index) {\r\n        return cards[index];\r\n    });\r\n\r\n    /*if (targetCards.length < maxLength) {\r\n     cards = cards.kq_excludes(targetCards);\r\n     while(targetCards.length < maxLength) {\r\n     targetCards.push(cards.pop());\r\n     }\r\n     } else */if (targetCards.length > maxLength) {\r\n        targetCards = targetCards.slice(0, maxLength);\r\n    }\r\n\r\n    return targetCards || [];\r\n};\r\n\r\nKQCard.testAutoSelect = function(cards) {\r\n\r\n};"
  ]
}
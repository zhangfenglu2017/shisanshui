
var SSGDesk = require('ssg-desk');
var DeskManager = require('base/desk-manager');
var RoomManager = require('base/room-manager');
var BigRecord = require('base/big-record');
var Record = require('base/record');
var deskMng = new DeskManager();
var lottery = require("base/lottery");

module.exports = SSGDeskManager;
function SSGDeskManager() {

    this.interRandomPlayers = [];//进入随机场的用户

    /*处理信息*/
    this.processAction = function (info,ws) {
        if (info == null) {
            return;
        }
        var action = info.action;
        var data = info.data;
        if (data == null) {
            return;
        }

        /*-------------------------*/
        if(action == "recordId"){
            var recordId = data.recordId;
            BigRecord.getRecordfromId(recordId,function(result){
                DeskManager.sendMessage(ws,'recordId',true,{'recordMsg':result});
            });
        }
        /*-------------------------*/
        var userId = data.userId;
        var player = deskMng.getPlayer(userId);

        var desk = null;
        if (player != null) {
            desk = deskMng.getDesk(player.roomId);//寻找用户是否有在桌子
            if (desk != null && desk.isDeskEnd()) {
                if(action == "onceAgain"){
                    var again = data.again;
                    if(again){

                    }else{
                        deskMng.removeDeskFromHall(desk,userId,'check');
                        desk = null;
                    }
                }
                // deskMng.removeDeskFromHall(desk,userId,'check');
                // desk = null;
            }
        }

        if (info.action == 'joinDesk' && player != null) {
            var roomId = data.roomId;
            var desk = deskMng.getDesk(roomId);
            if (desk != null && desk.setting4 == 0)  {
                //四人支付
                if (player.cardNumber < desk.needCard ) {   //没有足够的房卡数
                    DeskManager.sendMessage(ws,'joinDesk',false,{'reason':'cardNumber'});
                    return;
                }
            }
            player.readyStatus = false;      //进入游戏的默认状态
        }

        if (!deskMng.processAction(info,ws)) {
            switch (action) {
                case "createDesk":
                    if (player != null) {
                        this.createDesk(data,ws,player);
                    }
                    break;
                case "getDaiKaiDesk":
                {
                    console.log("====================getDaiKaiDesk ===== userId===" + userId);
                    RoomManager.getDaiKaiFang(parseInt(userId),function(result,list){
                        if(result)
                        {
                            console.log("代开列表："+JSON.stringify(list));
                            DeskManager.sendMessage(ws,'getDaiKaiDesk',true,{daikaiList:list});
                        }
                    });
                }
                    break;
                case "playCard"://用户出牌
                    if( desk != null ){
                        desk.playerPlayCard(userId,data.card);
                    }
                    break;
                case "getRecord"://获取用户记录
                    BigRecord.getRecords(userId,function (error,result) {
                        //result['userid'] = userId;
                        //console.log(result,"-----------------------------------65");
                        try {
                            if (error == null) {
                                player.socket.send(JSON.stringify({'action':'getRecord','result':true,'data':result}));
                            }
                            else {
                                player.socket.send(JSON.stringify({'action':'getRecord','result':false,'data':result}));
                            }
                        }
                        catch (e) {
                            console.log(e);
                        }
                    });
                    break;
                case "getItemRecord"://获取记录的子记录
                    var parentId = data.parentId;
                    var record = new Record();

                    //console.log(parentId);
                    //record.getRecords(parentId,userId,function(result) {
                        try {
                            //player.socket.send(JSON.stringify({'action':'getItemRecord','result':true,'data':result}));
                            player.socket.send(JSON.stringify({'action':'getItemRecord','result':true,'data':parentId}));
                        }
                        catch (e) {
                            console.log(e);
                        }
                   // });
                    break;
                case "getHallInfo":
                    Record.getHallInfo(function(result) {
                        try {
                            player.socket.send(JSON.stringify({'action':'getHallInfo','result':true,'data':result}));
                        }
                        catch (e) {
                            console.log(e);
                        }
                    });
                    break;
                case "inviteCode":   //处理邀请码
                    var inviteCode = data.inviteCode;
                    if( inviteCode !='' && inviteCode.length==6 ){
                        var userId = data.userId;
                        player.updateCode(inviteCode,userId,function(result){
                            if(result){
                                player.socket.send(JSON.stringify({'action':'inviteCode','result':true,'data':inviteCode}));
                            }else{
                                player.socket.send(JSON.stringify({'action':'inviteCode','result':true,'data':''}));
                            }
                        });
                    }
                    break;
                case "interRandom"://进入随机场
                    if (player != null) {
                        this.interRandomRoom(player);
                    }
                    break;
                case "cancelRandom"://取消进入随机场
                    if (player != null) {
                        this.leaveRandomRoom(player,true);
                    }
                    break;
                case "feedback":
                    try {
                        player.socket.send(JSON.stringify({'action':'feedback','result':true,'data':{}}));
                    }
                    catch (e) {
                        console.log(e);
                    }
                    break;
                case "sharePng":
                    deskMng.sharePng(userId,ws);
                    break;
                case "lottery":
                    lottery.run(info,ws);
                    break;
                default:
                    break;
            }
        };

        this.isPlayerExistRandomRoom = function(player) {
            for (var i = 0; i < this.interRandomPlayers.length; i++) {
                var tPlayer = this.interRandomPlayers[i];
                if (player.id == tPlayer.id) {
                    return true;
                }
            }
            return false;
        };

        this.interRandomRoom = function(player) {

            if (this.isPlayerExistRandomRoom(player)) {
                this.leaveRandomRoom(player,false);
            }

            if (this.isPlayerExistRandomRoom(player) || player.cardNumber < 100) {
                try {
                    var reason = '你已经在匹配队列';
                    if (player.cardNumber < 100) reason = '你的钻石不足';
                    player.socket.send(JSON.stringify({'action':'interRandom','result':false,'data':{'reason':reason}}));
                }
                catch (e) {
                    console.log(e);
                }
                return;
            }

            console.log(player.nickname + "-- 进入随机场");
            console.log("随机场人数：" + this.interRandomPlayers.length);

            this.interRandomPlayers.push(player);//玩家进入房间
            player.interRandomTime = Date.parse(new Date());

            try {
                player.socket.send(JSON.stringify({'action':'interRandom','result':true,'data':{}}));
            }
            catch (e) {
                console.log(e);
            }

            if (this.interRandomPlayers.length >= 4) {//创建一个房间让四人进入房间
                var pepoleArr = [];
                for(var i=0 ; i<4;i++) {
                    pepoleArr.push(this.interRandomPlayers.shift());
                }

                var self = this;
                RoomManager.getAvailableRoom(pepoleArr,function (result,room,pepoleArr) {
                    if (result) {
                        var roomId = room.roomId;
                        var desk = deskMng.getDesk(roomId);
                        if (desk == null) {//可以用来创建
                            desk = new SSGDesk();
                            desk.roomMng = room;
                            /*数据库保存*/
                            desk.isRandomDesk = true;   //是随机场
                            desk.setting1 = room.setting1 = 5;//设置条数 局数
                            desk.setting2 = room.setting2 = 0;//人数 4人
                            desk.setting3 = room.setting3 = 3;//玩法
                            desk.setting6 = room.setting6 = 1;// 超时出牌
                            desk.setting8 = room.setting8 = null;//没王
                            desk.maxNumber = 4;
                            desk.mMax = 1;
                            desk.setting4 = room.setting4 = 0;

                            room.createUserId = 8888;//创建者
                            room.type = 'ssg';
                            room.save(function (error) {

                            });
                            /*设置desk的信息*/
                            desk.createId = 8888;
                            desk.baseScore = 1;
                            desk.roomId = roomId;
                            /*新创建的desk加入大厅*/
                            deskMng.desks.push(desk);
                            /*加入房间*/
                            //desk.joinDesk(player,ws);
                            //var playerIds = [];
                            for (var i = 0; i < pepoleArr.length; i++) {
                                var jPlayer = pepoleArr[i];
                                jPlayer.readyStatus = true;
                                desk.joinDesk(jPlayer,jPlayer.socket);
                                //playerIds.push(jPlayer.id);
                            }
                            desk.fapai();
                            //删除等待数组中的数据
                            /*for (var i = 0; i < playerIds.length; i++) {
                                self.leaveRandomRoom({'id':playerIds[i]},false);
                            }
                            playerIds = [];*/
                        }
                    }
                });
            }
        };

        this.leaveRandomRoom = function(player,shoudPost) {
            var index = -1;
            for (var i = 0; i < this.interRandomPlayers.length; i++) {
                var tPlayer = this.interRandomPlayers[i];
                if (tPlayer.id == player.id) {
                    index = i;
                    break;
                }
            }
            if (index != -1) {
                console.log('删除成功');
                this.interRandomPlayers.splice(index,1);
                if (shoudPost) {
                    try {
                        player.socket.send(JSON.stringify({'action':'cancelRandom','result':true,'data':{}}));
                    }
                    catch (e) {
                        console.log(e);
                    }
                }
            }
        };
        //创建房间
        this.createDesk = function (data,ws,player) {
            //var Card = [[16,21,28],[30,42,56],[46,60,84]];
            //console.log(data,"准备创建房间-----------ssg-desk-manager -- 240");
            var cardNumber = 4;
            var juNum = 5;
            var renNum = 4;
            var js = 1;
            //setting1是局数：0|1|2|3表示 5|10|20|40局
            /*#####
             * setting1 局数  (0 | 1 | 2 ) == (5局|10局|20局)
             * setting2 人数  (0 | 1 | 2 | 3) == (4人|5人|6人|7人)
             * setting3 玩法  [0 , 0 , 0 , 0 , 0]==(疯狂场|鬼牌|比花色|坐庄|马牌)0表示没选择，true表示选择了
             * setting4 AA制收取房费  (0 | 1 | 2 ) == (平摊|赢者扣|房主扣)
             * setting5 倍率  (0~1) == (1~3倍)
             * setting6 超时出牌
             * setting7 [1~4 ,1~13] == [花色，点数]
             * */
            switch (data.setting1) {
                case 0:juNum = 5;js=1; break;
                case 1:juNum = 10;js=2;break;
                case 2:juNum = 20;js=3;break;
                case 3:juNum = 30;js=4;break;
            }
            //setting2是人数：0|1|2|3表示4|5|6|7人
            var rs =1;
            switch (data.setting2) {
                case 1:renNum = 5;rs=2;break;
                case 2:renNum = 6;rs=3;break;
                case 3:renNum = 7;rs=4;break;
            }
            cardNumber = js;
            if (data.setting4 != 0) {  //
                cardNumber = Math.ceil(rs+js);
            }
            //console.log("281行---需要房卡",cardNumber);
            if (player.cardNumber < cardNumber ) {//没有足够的房卡数
                DeskManager.sendMessage(ws,'createDesk',false,{});
                return;
            }
            //console.log("有足够的房卡");
            data.setting1  = parseInt(data.setting1) + 2;
            RoomManager.getAvailableRoom(true,function (result,room) {
                if (result) {
                    //room是一个RoomManager对象
                    var roomId = room.roomId;
                    var desk = deskMng.getDesk(roomId);
                    if (desk == null) {
                        //可以用来创建
                        desk = new SSGDesk();
                        desk.roomMng = room;
                        /*数据库保存*/
                        desk.setting1 = room.setting1 = data.setting1;  // 设置局数
                        desk.setting2 = room.setting2 = data.setting2;  // 人数
                        desk.setting3 = room.setting3 = data.setting3;  // 玩法 [疯狂场,鬼牌,比花色,坐庄,马牌]
                        desk.setting4 = room.setting4 = data.setting4;  // 房费 0为平摊 1为赢者扣 2为房主扣
                        desk.setting5 = room.setting5 = data.setting5;  // 倍率 (0~1) == (1~3倍)
                        desk.setting6 = room.setting6 = data.setting6;  // setting6 超时出牌
                        desk.setting9 = room.setting9 = data.setting9;  //代开房
                        desk.maxNumber = renNum;//最大人数
                        desk.mMax = juNum;      //设置总局数
                        desk.needCard = cardNumber;
                        desk.setting7 = room.setting7 = "";  //[1~4 ,1~13] == [花色，点数]
                        desk.ma = "";
                        if (data.setting3[4]) {  // data.setting3[4] 马牌
                            desk.setting7 = room.setting7 = data.setting7;//[1~4 ,1~13] == [花色，点数]
                            desk.ma = desk.setting7;
                        }
                        desk.setting8 = room.setting8 = data.setting8;
                        room.createUserId = data.userId;//创建者
                        room.type = 'ssg';
                        room.save(function (error) {});
                        /*设置desk的信息*/
                        desk.createId = data.userId;
                        desk.baseScore = data.baseScore;
                        desk.roomId = roomId;
                        desk.overTime = new Date().getTime(); // 
                        desk.timeOver = '';
                        var v = [0,1,2,3,4,5];
                        for(var j, x, i = v.length; i; j = parseInt(Math.random() * i), x = v[--i], v[i] = v[j], v[j] = x);
                        desk.playersIndexAyy = v;//用户座位

                        /*新创建的desk加入大厅*/
                        //console.log(desk,'-----------------317');
                        deskMng.desks.push(desk);
                        console.log("房间号：" + roomId);
                        /*创建者加入房间*/
                        player.readyStatus = false;
                        if(desk.setting9)
                        {
                            RoomManager.createDaiKaiFang((roomId+""),parseInt(desk.createId),'ssz',function (result){
                                if(result)
                                {
                                    var daikaiStr = "代开房间："+ roomId + "已创建！"
                                    //console.log(JSON.stringify(roomlist));
                                    DeskManager.sendMessage(ws,'daikaiDesk',true,{daikai:daikaiStr});
                                }
                            });

                            //RoomManager.getDaiKaiFang(parseInt(desk.createId),function(result,list){
                            //    //if(result)
                            //    //{
                            //    //    console.log(JSON.stringify(list));
                            //    //}
                            //});

                        }else
                            desk.joinDesk(player,ws);
                    }else {//已经存在的房间
                        DeskManager.sendMessage(ws,'createDesk',false,{});
                    }
                    
                }
                else {
                    DeskManager.sendMessage(ws,'createDesk',false,{});
                }
            });
        };
    };

    /*用户链接断开处理*/
    this.networkErrorAction = function (info,ws) {
        deskMng.networkErrorAction(info,ws);
    };
}


//用户处理类
var Player = require('base/player');
var RoomManager= require('base/room-manager');
var moment = require('moment');
module.exports = DeskManager;

function DeskManager() {
    /*所有的用户*/
    //noinspection JSUnresolvedVariable
    this.players = [];
    /*所有的桌子*/
    this.desks = [];

    this.debugPlayer = function (pId) {
        var player = new Player();
        player.readyStatus = true;
        player.id = pId + 100000;
        player.nickname = 'debug'+pId;
        player.sex = pId%2;
        player.avatarUrl = "http://wx.qlogo.cn/mmopen/BVyz4R8q6puJibEv1hrsaTmIKQhkaTS9FyvcevvC5hlxFnfOuspDjicG0GtzyJXOhNT7g1WZDeCDQhnRdEOgz3QMnP0F9iboQGy/0";
        return player;
    };

    /*
       说明:  处理信息
       info: 用户发的信息
       ws:   用户的链接
       公用方法中处理的信息有:
       1、login          用户登录
       2、getUserInfo    获取用户的信息
       3、joinDesk       用户加入房间
       4、createDesk     用户创建房间
       @return  true:表示已被此方法处理过
                false:表示此方法不处理这些信息
       */
    setInterval(function(){
        //console.log('开始检查用户');
        for (var i = 0; i < this.players.length; i++) {
            var player = this.players[i];
            var now = Date.parse(new Date());
            if (now - player.recvTime > 15000) {//超过十秒
                if (player.roomId.length > 0) {
                    desk = this.getDesk(player.roomId);//寻找用户是否有在桌子
                    if (desk != null) {
                        desk.sendOnlineStatus(player.id,0);
                    }
                }
            }
        }
    }.bind(this),15000);

    this.processAction = function (info,ws) {
        if (info == null) {
            return false;
        }
        var action = info.action;
        //console.log('action:'+action);
        var data = info.data;
        if (data == null) {
            return false;
        }
        var userId = data.userId; //发信息的用户id
        // if (userId == null) {
        //     return true;
        // }
        /*回馈信息服务器有收到信息*/
        try {
             var info = {'didReceive':action,'result':true,'data':data};
             ws.send(JSON.stringify(info));
        } catch (e) {

        } finally {

        }
        // console.log("---------------------------------76",action);
        /*处理游戏以外的操作*/
        if (action == 'login') {
            this.loginAction(data,ws);
            return true; //true表示在这里有被处理过
        }
        if (action == 'checkAction') {
            DeskManager.sendMessage(ws,'checkAction',true,{});
        }

        if (data == null) return true;
        if (data.userId == null) return true;

        /*处理游戏内的操作*/
        var player = this.getPlayer(userId);
        if (player == null) {//大厅没有找到用户
            //console.log("用户是空的")
            this.forceExit(ws,'processAction');//强制退出
            return true;
        }
        player.socket = ws;//更新用户的网络链接
        player.recvTime = Date.parse(new Date());//更新收到用户消息的时间
        var desk = null;
        if (player != null) {
            desk = this.getDesk(player.roomId);//寻找用户是否有在桌子
            if (desk != null) {
                desk.sendOnlineStatus(userId,1);
                if (desk != null) {
                    desk.sendOnlineStatus(userId,1);
                  
                }
            }
            if (action == 'checkAction') {//checkAction处理到这里不再处理
                return true;
            }
        }

        var processResult = false;
        //在桌子的一些操作 如果桌子为空 则把用户请出桌子
        switch (action) {
          case "getDeskInfo":
          case "leaveDesk":
          case "dissolveDesk":
          case "timeoutDissolve":
          case "requestDissolve":
          case "answerDissolve":
          case "sendText":
          case "sendImage":
          case "sendP2PMessage":
          case "sendAudioMessage":
          case "ready":
              if (desk == null) {
                  this.sendLeaveDeskAction(ws);
                  return true;
              }
              break;
          default:
              break;
        }
        /*对应相应的信息处理*/
        switch (action) {    
            case "getUserInfo":
                this.getUserInfo(data,ws);
                processResult = true;
                break;
            case "pause":
                if (desk != null) {
                    desk.sendToAll('pause',true,{'userId':userId});
                }
                processResult = true;
                break;
            case "active":
                if (desk != null) {
                    desk.sendToAll('active',true,{'userId':userId});
                }
                processResult = true;
                break;
            case "getDeskInfo":
                if (player != null && desk != null) {
                    DeskManager.sendMessage(ws,'deskInfo',true,desk.specialFormatter());
                }
                break;
            case "reconnect":
                if (player != null) {
                    DeskManager.sendMessage(ws,'reconnect',true,{});
                    player.updateOnlineStatus(1,userId);
                    if (desk != null) {
                        desk.sendOnlineStatus(userId,1);
                    }
                }
                break;
            case "createDesk":
                //创建桌子不处理
                break;
            case "getDaiKaiDesk":
                console.log("====================getDaiKaiDesk   desk--manager");
                break;
            case "qingli":
                if(desk!=null){
                    if ( !desk.isBegin && desk.cIndex == 0) {    //牌局开始了不能请离
                        var leaveId = data.leaveId;
                        desk.sendToAll('qingli',true,{'leaveId':leaveId});
                        desk.leaveDesk(leaveId);
                        if(desk.players.length == 0){
                            this.deleteDesk(desk,userId);
                        }
                    }
                }
                break;
            case "changeInfo": //更改信息
                var changeInfo = data.changeInfo;
                var wx = changeInfo.wx, phone = changeInfo.phone ;
                player.updateUserInfo(wx,phone,userId,function(result){
                    var changedRows = result.changedRows;
                    DeskManager.sendMessage(ws,'changeInfo',true,changedRows);
                });
                break;
            case "loginJoin":  //从登陆界面进入桌子
                if (player != null) {
                    player.beilv = 0;
                    var roomId = data.roomId;
                    var desk = this.getDesk(roomId);
                    if (desk == null) {
                        // console.log("-------------------------204");
                        DeskManager.sendMessage(ws,'loginJoin',false,{'reason':'notExist'});
                    }
                    else {
                        if (!desk.joinDesk(player,ws)) {
                            DeskManager.sendMessage(ws,'loginJoin',false,{'reason':'full'});
                        }
                        else {
                            //console.log("-------------------213");
                            var PlayerReadyInfo = [];
                            for(var i=0; i<desk.players.length; i++){
                                PlayerReadyInfo.push({'id':desk.players[i].id,'readyStatus':desk.players[i].readyStatus});
                            }
                            DeskManager.sendMessage(ws,'loginJoin',true,PlayerReadyInfo);
                            if ( desk.canFp() ){
                                desk.fapai();
                            }
                        }
                    }
                }
                break;
            case "joinDesk":  //加入房间
                if (player != null) {
                    player.beilv = 0;
                    var roomId = data.roomId;
                    var desk = this.getDesk(roomId); 
                    if (desk == null) {
                        DeskManager.sendMessage(ws,'joinDesk',false,{'reason':'notExist'});
                    }
                    else {                        
                        if (!desk.joinDesk(player,ws)) {
                            DeskManager.sendMessage(ws,'joinDesk',false,{'reason':'full'});
                        }
                        else {
                            var PlayerReadyInfo = [];
                            for(var i=0; i<desk.players.length; i++){
                                PlayerReadyInfo.push({'id':desk.players[i].id,'readyStatus':desk.players[i].readyStatus});
                            }
                            DeskManager.sendMessage(ws,'deskPlayers',true,PlayerReadyInfo);
                            if ( desk.canFp() ){
                                desk.fapai();
                            }
                        }
                    }
                }
                break;
           case "startGame":  //开始游戏（待测试）
                 if (player != null) {
                    createId = desk.createId;
                    if( createId != userId ){
                        return;
                    }
                    roomId = desk.roomId
                    //console.log("----------------------房间号--",roomId);
                    var room = this.getDesk(roomId);    //根据房间号获取桌子信息
                    if( room!='') {                        
                        // if ( desk.canFp(1) ) {
                        //     desk.fapai(1);
                        // }
                        if(desk.setting3[3]  && desk.setting5>0){   //庄家模式并且 有1倍以上选择项 需要闲家选择倍率
                            desk.sendDeskInfoToAll('selectBeiLv');  // 发送消息给客户端要求闲家选择倍率
                        }else{
                            if ( desk.canFp(1) ) {
                                desk.fapai(1);
                            }
                        }
                    }
                }        
                break;
            case "beiLv":
                if( desk!=null ){ // 桌子不为空且还没开始 
                    player.beilv = data.beilv;                  
                    desk.sendToAll('beiLv',true,{'userId':userId,"beilv":data.beilv});
                    if ( desk.canFp() ) {
                        desk.fapai();
                    }
                }
                break;
            case "leaveDesk"://离开桌子
                if (desk != null) {
                    if (desk.isBegin) {//牌局开始了不能退出
                       //直接请求解散
                       this.processAction({'action':'requestDissolve','data':{'userId':userId}},ws);
                    }
                    else {
                        desk.leaveDesk(userId);
                        //告诉退出用户可以退出了
                        DeskManager.sendMessage(ws,'leaveDesk',true,{});//直接退出
                        if (desk.players.length == 0) {//销毁房间
                            this.deleteDesk(desk,userId);
                        }
                    }
                }
                else {
                    DeskManager.sendMessage(ws,'leaveDesk',true,{});//直接退出
                }
                processResult = true;
                break;
            case "dissolveDesk"://解散桌子
                if (desk != null && desk.isRandomDesk) {
                    if (desk.isBegin) {//桌子开始了
                        for (var i = 0; i < desk.players.length; i++) {
                            var tp =  desk.players[i];
                            if (tp.id != userId) {//补充其它用户的信息
                                // tp.userCards(-1,function(result){

                                // });
                            }
                        }
                    }
                    this.deleteDesk(desk,userId);
                    return;
                }
                if (desk != null && desk.createId == userId) {
                    if (!desk.isBegin) {//桌子没有开始
                        this.deleteDesk(desk,userId);
                    }
                }
                break;
            case "timeoutDissolve"://超时解散
                if (desk != null) {
                    // desk.isDeskOver = true;
                    // desk.sendDeskInfoToAll('gameOver');
                    // this.removeDeskFromHall(desk,userId,'timeoutDissolve');//删除桌子
                }
                break;
            case "requestDissolve":
                if (desk != null) {
                    desk.requestDissolve(userId);
                }
                processResult = true;
                break;
            case "answerDissolve":
                if (desk != null) {
                    desk.answerDissolve(userId,data.answer);
                }
                processResult = true;
                break;
            case "sendText":
                if (desk != null) {
                    desk.sendTextMessage(userId,data.msg);
                }
                processResult = true;
                break;
            case "sendEmoji":
                if(desk != null){
                    desk.sendEmojiMessage(userId,data.emoji);
                };
                processResult = true;
                break;
            case "sendImage":
                if (desk != null) {
                    desk.sendImageMessage(userId,data.msg);
                }
                processResult = true;
                break;
            case "sendP2PMessage":
                if (desk != null) {
                    desk.sendP2PMessage(data.fromUserId,data.toUserId,data.msg);
                }
                processResult = true;
                break;
            case "sendAudioMessage":
                if (desk != null) {
                    desk.sendAudioMessage(userId,data.url);
                }
                processResult = true;
                break;
            case "ready":
                if (player != null && desk != null) {
                    player.readyStatus = true;
                    // 如果玩家手动准备了，就清掉自动准备定时器
                    if(player.readyTimeOut != null){
                        clearTimeout( player.readyTimeOut );
                        player.readyTimeOut = null;
                    }
                    if (desk != null) {
                         /*-------------------离线超时准备------------------------*/
                        // 如果所有人都离线了，不会进来这里执行，还不如解散房间
                        // if( desk.readyOverTime == "" && !desk.isDeskOver){
                        //     desk.overTime = setTimeout(function (){
                        //        for(var i=0;i<desk.players.length;i++){
                        //            var player = desk.players[i];
                        //            if( !player.readyStatus && !desk.isCBegin){      // 如果游戏还没有开始，玩家没有准备就说明你是离线了的
                        //                console.log("----------------------------有人离线了");
                        //                player.readyStatus = true;
                        //                if (desk.canFp()) {
                        //                    desk.fapai();
                        //                }
                        //            }
                        //        }
                        //     },5*1000)//5S后执行
                        // }
                        /*-----------------------------------------------------*/
                        desk.sendToAll('ready',true,{'userId':userId});
                    }
                    if(desk.setting3[3] && desk.setting5>0){
                        if(desk.isAllReady()){
                            desk.sendDeskInfoToAll('selectBeiLv');
                        }
                    }else{
                        if (desk.canFp()) {
                            desk.fapai();
                        }
                    }
                    // if (desk.canFp()) {
                    //     desk.fapai();
                    // }
                }
                processResult = true;
                break;
            case "onceAgain":
                var again = data.again;
                //desk.isBegin = false;
                if(desk != null ){
                    this.expendCard(desk);
                    if(again == "true"){  // 再来一局
                        var deskneedCard = desk.needCard;
                        var card = player.cardNumber - deskneedCard;
                        if( card < deskneedCard ){
                            DeskManager.sendMessage(ws,'onceAgain',false,{'reason':'noEnough'});
                        }else{
                            this.playAgain(desk,userId)
                        }
                    }else{    // 游戏结束，不来了
                        if(userId == desk.createId){    //如果是房主
                            this.deleteDesk(desk,userId);
                        }else{
                            desk.leaveDesk(userId);
                        }
                    }
                }else{
                    this.deleteDesk(desk,userId);
                }
                break;    
            default:
                break;
        }
        return processResult;//返回处理的结果
    };

    this.sendLeaveDeskAction = function(ws) {
        DeskManager.sendMessage(ws,'leaveDesk',true,{'reason':'desk'});
    };
    // 再来一局
    this.playAgain = function (desk,userId) {
        //if(desk.isDeskOver){
            // this.expendCard(desk);
            desk.createId = userId;
            desk.isDeskOver = false;
            desk.cIndex = 0;
            desk.bigRecord = null;
            desk.records = null;
            desk.isBegin = false;
            desk.createTime = moment().format('YYYY-MM-DD HH:mm:ss');
            desk.recordId = 0;

            players = desk.players;
            for(var i=0;i<players.length;i++){
                players[i].totalScore = 0;
                players[i].beilv = 0;
                players[i].readyStatus = false;
                players[i].cardInfo = [];
                players[i].cards = [];
            }
            desk.sendDeskInfoToAll('onceAgain');
        //}
    };
     // 支付房卡！！！
    this.expendCard = function(desk){
        if(desk.hasPayed){
            return;
        }
        
        if( desk.cIndex >0 ){ // 如果游戏开始了就扣房卡
            var cardNumber = desk.needCard ;
            desk.hasPayed = true;
            if(desk.setting4 == 0){ // 平摊AA制
                for (var i = 0; i < desk.players.length; i++) {
                    var player =  desk.players[i];
                    player.userCards(cardNumber,function (result) {});
                }
            }else if(desk.setting4 == 1){  // 赢者制
                var players = desk.players;
                var maxWin = 0;
                var winner = [];
                var winnerNum = 1;      // 赢的做多的人 最少也是一个
                for(var a=0; a<players.length;a++){
                    if(players[a].totalScore >= maxWin){
                        maxWin = players[a].totalScore;
                    }
                }
                for(var i = 0; i < players.length; i++){ // 统计有多少是赢的最多的可能有 两个或三个
                    if( maxWin == players[i].totalScore ){
                        winner.push( players[i].id );
                    }
                }
                winnerNum = winner.length;
                cardNumber = Math.floor(cardNumber/winnerNum);
                for(var i = 0; i < winnerNum; i++){
                    var player = this.getUser(winner[i],desk);
                    player.userCards(cardNumber,function (result) {});
                }
                console.log("有"+winnerNum+"个赢的最多");
                console.log("平均每个人要出"+cardNumber+"张房卡");

            }else{  // 房主制
                var player = this.getUser(desk.createId,desk);
                player.userCards(cardNumber,function (result) {});
            }

        }
    }
    /*用户链接断开处理*/
    this.networkErrorAction = function (info,ws) {
        var userId = ws.userId;
        if (userId != null) {
            var player = this.getPlayer(userId);
            if (player != null) {
                player.updateOnlineStatus(0,userId);
                if (player.roomId.length > 0) {
                    var desk = this.getDesk(player.roomId);
                    if (desk != null) {//向桌子的人发向用户掉线的情况
                        desk.sendOnlineStatus(userId,0);
                    }
                }
            }
        }
    };

    /*发送给用户强制退出程序*/
    this.forceExit = function (ws,action) {
        //console.log('action');
        DeskManager.sendMessage(ws,'forceExit',true,{});
    };

    /*根据roomId获取桌子的实例 如果不存在则返回null*/
    this.getDesk = function (roomId) {
        for (var i = 0;i < this.desks.length;i++) {
            var desk = this.desks[i];
            if (desk.roomId.length == 0) continue;
            if (desk.roomId == roomId) {
                return desk;
            }
        }
        return null;
    };
    /*根据用户id获取所在的房间号*/
    this.getUserDesk = function(userId){
        for(var i=0; i<this.desks.length; i++){
            var desk = this.desks[i];
            if(desk.createId = userId){
                return desk;
            }else{
                console.log("不是房主不能决定游戏开始");
                return false;
            }
        }
    }

    //获取用户
    this.getUser = function (userId,desk) {
        for (var i = 0;i < desk.players.length;i++) {
            var player = desk.players[i];
            if (player.id == userId) {
                return player;
            }
        }
        return null;
    };

    /*桌子销毁*/
    this.deleteDesk = function (desk,userId) {
        var td = this.removeDeskFromHall(desk,userId,'deleteDesk');
        if (td != null) {
            td.dissolveDesk(userId);
        }
    };

    this.removeDeskFromHall = function (desk,userId,action) {
        var index = -1;
        for (var i = 0;i < this.desks.length;i++) {
            var t = this.desks[i];
            if(desk == null){
                return;
            }
            if (t.roomId == desk.roomId) {
                index = i;
                RoomManager.updateRoom(t.roomId); // 房间解散 清掉当前的房间
                if( desk.timeOver != ''){
                    clearTimeout(desk.timeOver);
                }

                this.expendCard(desk);
                break;
            }
        }
        if (index != -1) {
            var td = this.desks[index];
            td.clearPlayers();

            for(var i=0;i<td.players.length;i++){
                var player = td.players[i]
                if( player.readyTimeOut !=null){
                    clearTimeout(player.readyTimeOut);
                    player.readyTimeOut ==null;
                }
                if(player.playCardTimeOut !=null){
                     clearTimeout(player.playCardTimeOut);
                    player.playCardTimeOut ==null;
                }
            }
            this.desks.splice(index,1);//删除此房间
            return td;
        }
        return null;
    };


    /*根据用户id获取用户实例 如果不存在则返回null*/
    this.getPlayer = function (userId) {
        for (var i = 0;i < this.players.length;i++) {
            var player = this.players[i];
            if (player.id == 0) continue;
            if (player.id == userId) {
                return player;
            }
        }
        return null;
    };

    /*添加用户到大厅*/
    this.playerInter = function (player) {
        var tp = this.getPlayer(player.id);
        if (tp == null) {//用户不在大厅
            console.log("玩家：",player.nickname," 进入大厅");
            this.players.push(player);
            return player;
        }
        else {//用户在大厅
            if (tp.roomId.length == 0) {//用户不在房间
                //更新玩家的信息 删除在数组所占的位置 重新加入
                var index = this.players.indexOf(tp);
                this.players.splice(index,1);//删除
                this.players.push(player);
                return player;
            }
            else {//用户在房间 更新在线状态
                tp.updateOnlineStatus(1,tp.id);
                //把在线状态告诉桌子里的所有用户
                var desk = this.getDesk(tp.roomId);

                if (desk != null) {
                    if (desk.isDeskEnd()) {//桌子结束了
                        desk.leaveDesk(tp.id);
                        // this.removeDeskFromHall(desk,0,'playerInter');
                        tp.roomId = '';
                        // desk = null;
                    }
                    else {
                        desk.sendOnlineStatus(tp.id,1);
                    }
                }
                else {
                    tp.roomId = "";//如果找不到桌子则清空桌子的信息
                    tp.cards = [];
                    tp.isMyTurn = false;
                    tp.readyStatus = false;
                }
                return tp;
            }
        }
        console.log("目前大厅有 ",this.players.length," 位玩家");
        return player;
    };

    /********处理********/
    /*处理用户登录的消息*/
    this.loginAction = function (data,ws) {
        //console.log(data);
        //console.log("------------------------------639");
        var openId = data.openid;
        var avatarUrl = data.headimgurl;
        var sex = data.sex;
        var nickname = data.nickname;
        var unionid  = data.unionid ? data.unionid:'';
        console.log("------------------------------------649");
        if(!unionid){
            DeskManager.sendMessage(ws,'noUionid',false,{});
            return;
        }
        if (openId != null && avatarUrl != null) {
            var self = this;
            var player = new Player();
            player.wxLogin(unionid,openId,avatarUrl,sex,nickname,ws._socket.remoteAddress,function (obj) {
                ws.userId = obj.id;
                var p = self.playerInter(player);
                DeskManager.sendMessage(ws,'login',true,p.formatterData());
            });
        }
        else {
            DeskManager.sendMessage(ws,'login',false,{});//登录失败的信息
        }
    };
    /*获取用户的信息*/
    this.getUserInfo = function (data,ws) {
        var player = new Player();
        var self = this;
        player.getUserInfo(data.openId,function (obj) {
            ws.userId = obj.id;
            var tp = self.getPlayer(obj.id);
            tp.cardNumber = obj.cardNumber;
            DeskManager.sendMessage(ws,'getUserInfo',true,obj.formatterData());
        });
    };

    /**/
    this.debug = function () {
        for (var i = 0;i < this.desks.length;i++) {
            var desk = this.desks[i];
            console.log(JSON.stringify(desk.specialFormatter()));
        }
    };

    /*处理用户登录的消息 1：成功  0，失败 */
    this.sharePng = function (userId,ws) {
        if (userId != null) {
            var self = this;
            var player = new Player();
            player.sharePng(userId,function (data) {
                // console.log(data)
                // var times = data == 1 ? 5000:1;
                // setTimeout(function() {
                    DeskManager.sendMessage(ws,'sharePngs',true,data);
                // }, times);//1s
            });
        }
    };
}

DeskManager.sendMessage = function (socket,action,result,data) {
    var info = {'action':action,'result':result,'data':data};
    try {
        socket.send(JSON.stringify(info));
    }
    catch (e) {
        console.log(e);
    }
};
